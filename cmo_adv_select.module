<?php

/**
 * @file
 * Advanced Webform Select Option
 */

/**
 * Implements hook_help().
 */
function cmo_adv_select_help($path, $arg) {
  $out = '';
  switch ($path) {
    case 'admin/config/development/cmo_adv_select' :
      $out .= '<p>' . t('Add URLs for sign up forms that use a select ' .
          'option for the sessions. The options will have to be formatted ' .
          '"sesstionkey_&ltcapasity&gt|&ltSesstion Title&gt &ltDate/Time&gt"') .
          '</p><p>' . t('Add Node id and a descriptive name in a "nid|' .
          'disctiptive name|custom error message" (ex. 2523|Drupal 101 - ' .
          'Nov. 10th 2015|Sorry select a different section). One entry per ' .
          'line and the nodes listed will get the advanced select applied to ' .
          'them.') .
          '</p>';
      break;
  }
  return $out;
}

/**
 * Implements hook_menu().
 */
function cmo_adv_select_menu() {
  $items = array();
  $items['admin/config/development/cmo_adv_select'] = array(
    'title' => 'CMO\'s Advanced Select',
    'description' => 'Add URLs for sign up forms that use a select option for the sessions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmo_adv_select_admin_settings'),
    'access arguments' => array('administer Advanced Select Settings'),
    'file' => 'cmo_adv_select.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function cmo_adv_select_permission() {
  return array(
    'administer Advanced Select Settings' => array(
      'title' => t('Administer Access to CMO\'sAdvanced Select Settings'),
      'description' => t('Access the CMO\'s Advanced Select Settings.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function cmo_adv_select_form_alter(&$form, &$form_state, $form_id) {
  // Load configured node ids from variable
  $nodes = _cmo_adv_select_load_sessions();
  if (@isset($nodes[$form['#node']->nid]) /*&& $nodes[$form['node']->nid] == */&& isset($form['submitted'])) {
    
    $cid = '';
    $its = _cmo_adv_select_decode_session_string($form['submitted'], $cid);
    $items = _cmo_adv_select_pull_number_of_submissions(
        $form['#node']->nid, $its);
    $select_string = _cmo_adv_select_string_push_back($items);
    $form['submitted'][$cid]['#options'] = $select_string;
    // Set Div with ID around Form element that will get updated by AJAX
    $form['submitted'][$cid]['#prefix'] = '<div id="session-ajax-replace">';
    $form['submitted'][$cid]['#suffix'] = '</div>';
    // Add ajax call back
    $form['submitted'][$cid]['#ajax'] = array(
      // 'callback' is a function that will be called when this element changes.
      'callback' => 'ajax_seat_check',
      // 'wrapper' is the HTML id of the page element that will be replaced.
      'wrapper' => 'session-ajax-replace',
    );
  }
}

/**
 * The AJAX method that double checks that the form is still advailible when 
 * option is selected.
 * @param type $form
 * @param type $form_state
 */
function ajax_seat_check($form, $form_state) {
  // Load configured node ids from variable
  $nodes = _cmo_adv_select_load_sessions();
  if (@isset($nodes[$form['#node']->nid]) && isset($form['submitted'])) {
    $cid = '';
    $its = _cmo_adv_select_decode_session_string($form['submitted'], $cid);
    $value_of_session = $form['submitted'][$cid]['#value'];
    $items = _cmo_adv_select_pull_number_of_submissions(
        $form['#node']->nid, $its);
    $valid_registration = _cmo_adv_select_is_valid_registration(
        $items, $value_of_session);
    if ($valid_registration == false) {
      $select_string = _cmo_adv_select_string_push_back($items);
      $form['submitted'][$cid]['#options'] = $select_string;
      $form['submitted'][$cid]['#description'] = 
          $nodes[$form['#node']->nid]['error_msg'];
    }
    else {
      $form['submitted'][$cid]['#description'] = '';
    }

    return $form['submitted'][$cid];
  }
  return;
}

function ajax_update($form, $form_state) {
  
//  $foo = array();
//  exec('whoami && ls && cd sites/all/modules/cmo_adv_select && pwd && ll && git pull && ls', $foo);
//  $output = '';
//  foreach ($foo as $value) {
//    $output.= $value;
//    $output .= t('<br>');
//  }
//  watchdog('cmo-php', 'ajax call ajax_update: ' . count($foo));
//  $roo= array(
//    '#type' => 'button',
//    '#value' => t('Update'),
//     '#prefix' => '<div id="ajax-update-msg">',
//    '#suffix' => $output . '</div>',
//    '#ajax' => array(
//      // 'callback' is a function that will be called when this element changes.
//      'callback' => 'ajax_update',
//      // 'wrapper' is the HTML id of the page element that will be replaced.
//      'wrapper' => 'ajax-update',
//    ),
//  );
//  return $roo;
//  return "Hello, In the process of working on.";
}

/**
 * Helper method to decode the session strings.
 * @param  type $c omps
 * @return type
 */ function _cmo_adv_select_decode_session_string(&$comps, &$cid) {
  $its = array();
  foreach ($comps as $key => $component) {
    if (isset($component['#webform_component']) &&
        $component['#webform_component']['type'] === 'select') {
      $cid = $key;
      //Grab selectors string
      $extra_items = $component['#webform_component']['extra']['items'];
      //Split into options
      $items = explode("\n", $extra_items);
      //Split into key => value
      foreach ($items as $item) {
        $tmp = explode('|', $item);
        $session = explode('_', $tmp[0]);
        if (count($session) == 2 && is_numeric($session [1])) {
          $values = array(
            'session_name' => $session[0],
            'session_copasity' => intval($session[1]),
            'session_details' => $tmp[1],
            'submission_count' => 0
          );
          $its[$tmp[0]] = $values;
        }
        else {
          break;
        }
      }
    }
  }
  return $its;
}

/**
 * Helper method to parse through the submission data.
 * @param type $its
 * @param type $subm
 */
function _cmo_adv_select_find_data(&$its, &$subm) {
  if(!is_array($subm) && isset($its[$subm])){
    watchdog('cmo-mod++', $subm);
    $its[$subm]['submission_count']++;
  } else if(is_array($subm)) {
    dsm($subm);
    watchdog('cmo-mod--', print_r($subm));
    foreach ($subm as $value) {
      _cmo_adv_select_find_data($its, $value);
    }
  }
}

/**
 * Helper method used to total up the submissions.
 * @param type $nid
 * @param type $its
 * @return type
 */
function _cmo_adv_select_pull_number_of_submissions(&$nid, &$its) {
  $sub = webform_get_submissions($nid);
  if (count($sub) > 0) {
    foreach ($sub as $submission) {
      foreach ($submission->data as $element) {
        _cmo_adv_select_find_data($its, $element);
      }
    }
  }
  return $its;
}

/**
 * Helper method to create the push bach string to the form .
 * @param type $items
 */
function _cmo_adv_select_string_push_back(&$items) {
  $option = array();
  foreach ($items as $key => $value) {
    $seats_left = intval($value['session_copasity']) -
        intval($value['submission_count']);
    if ($seats_left > 0) {
      $session_details = substr($value['session_details'], 0, strlen($value['session_details']) - 1);
      if($seats_left > 1) {
      $option[$key] = $session_details . t(". There are ") . $seats_left .
          t(" seats left.\n");
      } else {
        $option[$key] = $session_details . t(". There is ") . $seats_left .
          t(" seat left.\n");
      }
    }
  }
  return $option;
}

/**
 * Helper function that checks if the selected session has seats 
 * left in it or not.
 * @param type $items
 * @param type $v alue_of_ session
 * @return boolean
 */
function _cmo_adv_select_is_valid_registration(&$items, &$value_of_session) {
  foreach ($items as $key => $value) {
    $total_left = intval($value['session_copasity']) -
        intval($value['submission_count']);
    if ($key == $value_of_session && $total_left > 0) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Helper method that loads the configured nodes that are using the advansed 
 * select option.
 * @staticvar type $sessions
 * @param type $nid
 * @return type
 */
function _cmo_adv_select_load_sessions($nid = NULL) {
  static $sessions;
  $default_error_msg = t('You were to slow!! ' .
      'Please choose a different section');
  if (!isset($sessions)) {
    $sessions = array();
    $results = explode(PHP_EOL, variable_get('cmo_adv_select_nids'));
    foreach ($results as $session) {
      $tmp = explode('|', $session);
      $sessions[$tmp[0]] = array(
        'nid' => $tmp[0],
        'title' => $tmp[1],
        'error_msg' => isset($tmp[2]) ? $tmp[2] : $default_error_msg);
    }
  }
  if (isset($sessions[$nid])) {
    return $sessions[$nid];
  }
  else {
    return $sessions;
  }
}
