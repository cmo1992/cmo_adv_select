<?php

/**
 * @file
 * Advanced Webform Select Option
 */

/**
 * Implements hook_help().
 */
function cmo_adv_select_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/config/development/cmo_adv_select' :
      $output .= '<p>' . t('Add URLs for sign up forms that use a select ' .
              'option for the sessions. The options will have to be formatted ' .
              '"sesstionkey_&ltcapasity&gt|&ltSesstion Title&gt &ltDate/Time&gt"') .
          '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function cmo_adv_select_menu() {
  $items = array();
  // Admin menue
  $items['admin/config/development/cmo_adv_select'] = array(
    'title' => 'CMO\'s Advanced Select',
    'description' => 'Add URLs for sign up forms that use a select option for the sessions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmo_adv_select_admin_settings'),
    'access arguments' => array('administer Advanced Select Settings'),
    'file' => 'cmo_adv_select.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function cmo_adv_select_permission() {
  return array(
    'administer Advanced Select Settings' => array(
      'title' => t('Administer Access to CMO\'sAdvanced Select Settings'),
      'description' => t('Access the CMO\'s Advanced Select Settings.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function cmo_adv_select_form_alter(&$form, &$form_state, $form_id) {
  $nodes = _cmo_adv_select_load_sessions();
  //dsm($form);
  //dsm($nodes);
  if (@isset($nodes[$form['#node']->nid]) && isset($form['submitted'])) {
    //dsm($form);
    $cid = '';
    $its = _cmo_adv_select_decode_session_string($form['submitted'], $cid);
    //dsm($its);
    //dsm($cid);
    $items = _cmo_adv_select_pull_number_of_submissions($form['#node']->nid, $its);
    //dsm($items);
    $select_string = _cmo_adv_select_string_push_back($items);
    //dsm($select_string);
    $form['submitted'][$cid]['#options'] = $select_string;
    // Add ajax call back
    $form['submitted'][$cid]['#ajax'] = array(
      // #ajax has two required keys: callback and wrapper.
      // 'callback' is a function that will be called when this element changes.
      'callback' => 'ajax_seat_check',
      // 'wrapper' is the HTML id of the page element that will be replaced.
      'wrapper' => 'edit-submitted-sessions',
        // There are also several optional keys - see ajax_example_autocheckboxes
        // below for details on 'method', 'effect' and 'speed' and
        // ajax_example_dependent_dropdown for 'event'.
    );

    //dsm($form);
    //$form['#validate'] = array('cmo_adv_select_submit_validate');
  }
}

/**
 * 
 * @param type $form
 * @param type $form_state
 */
function ajax_seat_check($form, $form_state) {
  $cid = '';
  $its = _cmo_adv_select_decode_session_string($form['submitted'], $cid); 
  //dsm($its);
  //dsm($cid);
  $value_of_session = $form['submitted'][$cid]['#value'];
  //watchdog('cmo-php-session', $form['submitted'][$cid]['#value']);
  //dsm($value_of_session);
  $items = _cmo_adv_select_pull_number_of_submissions($form['#node']->nid, $its);
  //dsm($items);
  //watchdog('cmo-php-its', print_r($items)); 
  $valid_registration = _cmo_adv_select_is_valid_registration($items, $value_of_session);
  if ($valid_registration == false) {
    $select_string = _cmo_adv_select_string_push_back($items);
    //dsm($select_string);
    $form['submitted'][$cid]['#options'] = $select_string;
    //dsm($form);
    //form_set_error($form['submitted'][$cid]);
    $form['submitted'][$cid]['#description'] = 'You were to slow!! Please choose a different section';
  } else {
    $form['submitted'][$cid]['#description'] = '';
  }
    $form['submitted'][$cid]['#title_display'] = 'none';
  return $form['submitted'][$cid]; //['#webform_component'];
  //return "Hello Sean";
}

/**
 * Helper method to decode the session strings.
 * @param type $comps
 * @return type
 */
function _cmo_adv_select_decode_session_string(&$comps, &$cid) {
  $its = array();
  foreach ($comps as $key => $component) {
    //dsm($component);
    if (isset($component['#webform_component']) && $component['#webform_component']['type'] === 'select') {
      $cid = $key;
      //dsm($cid);
      //Grab selectors string
      $extra_items = $component['#webform_component']['extra']['items'];
      //Split into options
      $items = explode("\n", $extra_items);
      //Split into key => value
      foreach ($items as $item) {
        $tmp = explode('|', $item);
        //watchdog('cmo-php', 'made it here _cmo_adv_select_decode_session_string');
        $session = explode('_', $tmp[0]);
        if (count($session) == 2 && is_numeric($session[1])) {
          $values = array(
            'session_name' => $session[0],
            'session_copasity' => intval($session[1]),
            'session_details' => $tmp[1],
            'submission_count' => 0
          );
          $its[$session[0]] = $values;
        }
        else {
          break;
        }
      }
    }
  }
  //dsm($its);
  return $its;
}

/**
 * Helper method used to total up the submissions.
 * @param type $nid
 * @param type $its
 * @return type
 */
function _cmo_adv_select_pull_number_of_submissions(&$nid, &$its) {
  //module_load_include('inc', 'webform', 'include/submissions');
  $sub = webform_get_submissions($nid);
  //dsm($sub);
  if(count($sub) > 0) {
    foreach($sub as $submission) {
      foreach($submission->data as $element) {
        if(isset($its[$element])){
          $its[$element]['submission_count']++;
        }
          //$selected_option = $submission->data[1];
          //dsm($selected_option);
//      foreach ($its as $key => $value) {
//        //watchdog('cmo-php', 'made it here _cmo_adv_select_pull_number_of_submissions');
//        if ($key == $selected_option[0]) {
//          $its[$key]['submission_count'] ++;
//        }
//      }
      }
    }
  }
  dsm($its);
  return $its;
}

/**
 * Helper method to create the push bach string to the form
 * @param type $items
 */
function _cmo_adv_select_string_push_back(&$items) {
  $option = array();
  foreach ($items as $key => $value) {
    //watchdog('cmo-php', 'made it here _cmo_adv_select_string_push_back');
    $seats_left = intval($value['session_copasity']) - intval($value['submission_count']);
    //print "<h2>" . $seats_left . "</h2>";
    if ($seats_left > 0) {
      $session_details = substr($value['session_details'], 0, strlen($value['session_details']) - 1);
      $option[$key] = $session_details . t(". There are ") . $seats_left . t(" seats left\n");
    }
  }
  return $option;
}
/**
 * Helper function that checks if the selected session has seats left in it or not.
 * @param type $items
 * @param type $value_of_session
 * @return boolean
 */
function _cmo_adv_select_is_valid_registration(&$items, &$value_of_session) {
  foreach ($items as $key => $value) {
    //watchdog('cmo-php', 'made it here _cmo_adv_select_is_valid_registration');
    $total_left = intval($value['session_copasity']) - intval($value['submission_count']);
    if ($key == $value_of_session && $total_left > 0) {
      return TRUE;
    }
  }
  return FALSE;
}

function _cmo_adv_select_load_sessions($casid = NULL) {
  static $sessions;
  if(!isset($sessions)) {
    $sessions = array();
    $results = explode(PHP_EOL, variable_get('cmo_adv_select_nids'));
    foreach ($results as $session) {
      $tmp = explode('|', $session);
      $sessions[$tmp[0]] = $tmp[1];
    }
  }
  //dsm($sessions);
  if (is_numeric($casid)) {
    return @$sessions[$casid];
  }
  else {
    return $sessions;
  }
}